set(AUTOSRC
"JPCTracer.h"
"core/Logger.cpp"
"core/core.h"
"core/Logger.h"
"core/IAnimated.h"
"core/View.h"
"core/Concepts.h"
"core/MaterialType.h"
"core/maths/Transformation.cpp"
"core/maths/Spectrum.cpp"
"core/maths/Transformation.h"
"core/maths/maths.h"
"core/maths/Shapes.h"
"core/maths/Spectrum.h"
"core/maths/Mat.h"
"core/maths/Vec.h"
"core/maths/Constants.h"
"engine/JPCTracerApi.h"
"engine/PluginsApi.h"
"engine/raytracing/SceneBuilder.cpp"
"engine/raytracing/SceneBuilder.h"
"engine/raytracing/Geometry.h"
"engine/raytracing/Base.h"
"engine/raytracing/TraceRay.h"
"engine/raytracing/detail/Intersect.cpp"
"engine/raytracing/detail/TraceRay.cpp"
"engine/raytracing/detail/Scene.h"
"engine/raytracing/detail/Intersect.h"
"engine/raytracing/detail/TracingContext.h"
"engine/raytracing/detail/acceleration/NaiveIntersection.cpp"
"engine/raytracing/detail/acceleration/IntersectionInfo.cpp"
"engine/raytracing/detail/acceleration/TriangleMesh.cpp"
"engine/raytracing/detail/acceleration/BoundingBoxIntersection.cpp"
"engine/raytracing/detail/acceleration/SphereMesh.cpp"
"engine/raytracing/detail/acceleration/BVHIntersection.cpp"
"engine/raytracing/detail/acceleration/TriangleMesh.h"
"engine/raytracing/detail/acceleration/BVHIntersection.h"
"engine/raytracing/detail/acceleration/NaiveIntersection.h"
"engine/raytracing/detail/acceleration/SphereMesh.h"
"engine/raytracing/detail/acceleration/IntersectionInfo.h"
"engine/raytracing/detail/acceleration/BoundingBoxIntersection.h"
"engine/raytracing/detail/acceleration/bvh/BVHConstructionHelper.cpp"
"engine/raytracing/detail/acceleration/bvh/BuildLBVH.cpp"
"engine/raytracing/detail/acceleration/bvh/BVHBuilderHelper.cpp"
"engine/raytracing/detail/acceleration/bvh/BuildLBVH.h"
"engine/raytracing/detail/acceleration/bvh/BVH.h"
"engine/raytracing/detail/acceleration/bvh/BVHConstructionHelper.h"
"engine/raytracing/detail/acceleration/bvh/BVHBuilderHelper.h"
"engine/renderer/Tracer.cpp"
"engine/renderer/ShaderBuffer.cpp"
"engine/renderer/JPCRenderer.cpp"
"engine/renderer/ShaderBuffer.h"
"engine/renderer/JPCRenderer.h"
"engine/renderer/RenderInterfaces.h"
"engine/renderer/Tracer.h"
"engine/renderer/Geomtry.h"
"engine/utilities/MeshIO.cpp"
"engine/utilities/ImageIO.cpp"
"engine/utilities/stringhelper.cpp"
"engine/utilities/MeshIO.h"
"engine/utilities/SamplingRoutins.h"
"engine/utilities/stringhelper.h"
"engine/utilities/SphericalCoordinates.h"
"engine/utilities/ImageIO.h"
"engine/films/FilmChannel.cpp"
"engine/films/Film.cpp"
"engine/films/Film.h"
"engine/films/FilmChannel.h"
"engine/shadersystem/DiscreteSampler.cpp"
"engine/shadersystem/Lights.cpp"
"engine/shadersystem/ShaderResults.cpp"
"engine/shadersystem/TextureBuffer.cpp"
"engine/shadersystem/BsdfClosure.cpp"
"engine/shadersystem/HitPoint.h"
"engine/shadersystem/shadersystem.h"
"engine/shadersystem/TextureBuffer.h"
"engine/shadersystem/BsdfClosure.h"
"engine/shadersystem/Shader.h"
"engine/shadersystem/utility.h"
"engine/shadersystem/DiscreteSampler.h"
"engine/shadersystem/ShaderResults.h"
"engine/shadersystem/Lights.h"
"engine/shadersystem/lights/SunLights.cpp"
"engine/shadersystem/lights/PointLights.cpp"
"engine/shadersystem/lights/PointLights.h"
"engine/shadersystem/lights/SunLights.h"
"plugins/Plugins.h"
"plugins/shaders/DebugBsdf.h"
"plugins/shaders/MirrorBsdf.h"
"plugins/shaders/Fresnel.h"
"plugins/shaders/LambertianBsdf.h"
"plugins/shaders/Mix.h"
"plugins/shaders/GlossyBsdf.h"
"plugins/samplers/GridSampler.cpp"
"plugins/samplers/GridSampler.h"
"plugins/samplers/samplers.h"
"plugins/integrators/DirectLightIntegrator.cpp"
"plugins/integrators/DebugIntegrator.cpp"
"plugins/integrators/DebugIntegrator.h"
"plugins/integrators/ShadowBehavior.h"
"plugins/integrators/Payload.h"
"plugins/integrators/DirectLightIntegrator.h"
"plugins/cameras/ProjectionCamera.cpp"
"plugins/cameras/ProjectionCamera.h"
"plugins/cameras/cameras.h"
)




set(INC 
"../")

set(LIBS 
spdlog
openimageio
)


jpctr_add_library(jpc_tracer "${AUTOSRC}" "${INC}" "${LIBS}" STATIC)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set_target_properties(jpc_tracer PROPERTIES COMPILE_FLAGS "-ffast-math") 
endif()

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries(jpc_tracer OpenMP::OpenMP_CXX)
endif()
