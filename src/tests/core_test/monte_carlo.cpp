#include "core/Linalg.h"
#include "core/Logger.h"
#include "core/MonteCarlo.h"
#include "gtest/gtest.h"
#include <functional>
#include <range/v3/view/slice.hpp>
#include <ranges>
#include <vector>
#include <range/v3/view.hpp>


namespace jpc_tracer {
    struct MISSample
    {
        Prec Val;
        std::vector<Prec> Pdfs;
        int DistIdx;
    };

    

    TEST(core, MonteCarlo2)
    {
        std::vector<MISSample> samples {
            { 1.0695682774209005,{ 0.33094599907143596, 0.0721446212749},0},
            { 1.7086083944894819,{ 0.39902476062669323, 0.0418479428660},0},
            { 0.6313499033162859,{ 0.17440655778516304, 0.2523932188248},0},
            { 0.727580256830398 ,{ 0.13872871342067222, 0.3357648347831},0},
            { 0.8482062616610213,{ 0.295415261978383, 0.095862860145542},0},
            { 0.630234276709497 ,{ 0.23072910212022318, 0.1608396504656},0},
            { 2.3580322605223887,{ 0.44804471101908083, 0.0282723144451},0},
            { 2.1271537831727705,{ 0.432009413881962, 0.032142058775732},0},
            { 2.1596264491062165,{ 0.43434376845315636, 0.0315473811178},0},
            { 1.256155992611268 ,{ 0.0586513993295797, 0.63716556226857},0},
            { 0.8908405890615352,{ 0.3032770803175319, 0.09001929923330},0},
            { 0.6103475658296476,{ 0.21118250664112026, 0.1880636882369},0},
            { 0.6127818737379531,{ 0.21532726299595195, 0.1819301135483},0},
            { 1.443646100899457 ,{ 0.37440627148890093, 0.0509574287574},0},
            { 0.7009372322241598,{ 0.26035320728998695, 0.1269019914278},0},
            { 0.6100968827568116,{ 0.1949910873967558, 0.21407191856705},0},
            { 2.3677192062450763,{ 0.44869066004617275, 0.0281265914957},0},
            { 0.669255794378304 ,{ 0.24945992591677416, 0.1384572091209},0},
            { 1.828693856013658 ,{ 0.4091089427851846, 0.03860451287614},0},
            { 0.6807283028020046,{ 0.2536746590901196, 0.13386655600953},0},
            { 2.7159307409173192,{ 0.47069166288646974, 0.0235872762033},0},
            { 0.762260647301145 ,{ 0.27701714616609097, 0.1110636606718},0},
            { 0.7062316327566959,{ 0.26197824702302536, 0.1252629026243},0},
            { 0.8147866996871445,{ 0.28873850351120833, 0.1011225045023},0},
            { 1.6837342409135985,{ 0.39686159508491925, 0.0425784375838},0},
            { 0.6087772721055934,{ 0.19901117557747008, 0.2072967457775},0},
            { 2.2418830257891873,{ 0.440137068436489, 0.030118637865379},0},
            { 0.8263578081186145,{ 0.1168146185744554, 0.40010370548297},0},
            { 2.5778074551566164,{ 0.46223227648997145, 0.0252388005281},0},
            { 1.8881717232396298,{ 0.41390155876843304, 0.0371523956762},0},
            { 0.6752599813315414,{ 0.25171099107590983, 0.1359861166678},0},
            { 0.7599416659825406,{ 0.13074099691236052, 0.3579211642323},0},
            { 0.8528580098047952,{ 0.2963060229020411, 0.09518216126715},0},
            { 0.6274662585755583,{ 0.2288974919037014, 0.16321376618206},0},
            { 1.9829687733620742,{ 0.4212921918666171, 0.03501943492244},0},
            { 0.8865744603924283,{ 0.30251905731039896, 0.0905668513830},0},
            { 1.8110911993262329,{ 0.4076659682945624, 0.03905273762458},0},
            { 1.3351861296333558,{ 0.3631163699645748, 0.05577410904459},0},
            { 0.6776136123646483,{ 0.1537552054443744, 0.29773358669115},0},
            { 0.6504942772170637,{ 0.16444302505158523, 0.2733345561761},0},
            { 0.902106308777076 ,{ 0.10351968171105251, 0.4450040005472},1},
            { 0.7352326290064246,{ 0.27018559080489996, 0.1173024919135},1},
            { 1.4347376268826615,{ 0.04168227477284348, 0.7298087602965},1},
            { 1.942789313096713 ,{ 0.003627884879920742, 0.989517694126},1},
            { 1.9828977349154138,{ 0.0010734899022578914, 1.00994667013},1},
            { 1.0130319385440438,{ 0.08713218905134859, 0.5073409249453},1},
            { 0.7651867707481195,{ 0.12953477590524068, 0.3613917386378},1},
            { 0.9858960636286177,{ 0.09087918929954308, 0.4923585500854},1},
            { 1.2220850170448314,{ 0.06220546923050661, 0.6193044366934},1},
            { 1.6620606434387852,{ 0.02316004466210807, 0.8463731758144},1},
            { 1.5090248928006733,{ 0.03530378057164936, 0.7680159346962},1},
            { 1.9747854530544344,{ 0.0015859338978260699, 1.00581481643},1},
            { 0.6424485973023513,{ 0.23768587732165, 0.1521327822944685},1},
            { 1.5334022426544411,{ 0.03328425222675503, 0.7805249514528},1},
            { 0.799945652558577 ,{ 0.12203495665950366, 0.3837384008060},1},
            { 1.175376239871537 ,{ 0.06727664325491467, 0.5946824584262},1},
            { 1.7861471909875883,{ 0.014140852002749659, 0.909699122101},1},
            { 0.7337150428579647,{ 0.2697811798321366, 0.11768261380276},1},
            { 0.6258272132656205,{ 0.22774996729449673, 0.1647189992849},1},
            { 1.141587292037261 ,{ 0.07110264702335985, 0.5767561439009},1},
            { 1.9644748071620974,{ 0.00224029889955738, 1.0005632141750},1},
            { 0.6983096419547692,{ 0.25952938583840346, 0.1277411101889},1},
            { 1.7546498131759511,{ 0.016367732243827367, 0.893636298860},1},
            { 0.6113154742460756,{ 0.2130329134562671, 0.18530023808592},1},
            { 0.7112639068872838,{ 0.14319328654813676, 0.3239840977025},1},
            { 1.1369076771205833,{ 0.07164375124511316, 0.5742648584963},1},
            { 0.6767665986904213,{ 0.1540522132753482, 0.29702699282490},1},
            { 0.6815307386067195,{ 0.15240545652643753, 0.3009659313913},1},
            { 0.6095333606894897,{ 0.1963908057159265, 0.21168816671138},1},
            { 0.6252297165234605,{ 0.17845977665123078, 0.2443404433852},1},
            { 1.0618407077219723,{ 0.08073920633838629, 0.5339632813616},1},
            { 0.8643131612357062,{ 0.10988203578981975, 0.4229205936215},1},
            { 0.7622555502272526,{ 0.27701591766265554, 0.1110647522139},1},
            { 1.213001815196581 ,{ 0.06317300152123868, 0.6145293643579},1},
            { 0.7963372297546908,{ 0.1227776185792723, 0.38146525702252},1},
            { 0.6866588913489347,{ 0.25572206867802927, 0.1316917779141},1},
            { 1.733119619624823 ,{ 0.017913632739811107, 0.882652575447},1},
            { 1.7046306666570468,{ 0.01998983481377256, 0.8681131361018},1},
            { 1.4547921835635946,{ 0.039925585257466305, 0.740137547368},1},
            { 1.9059438009747969,{ 0.006021599221836229, 0.970748993741},1}
        };

        std::vector<int> distribution_count = {40,40};

        auto func = [&](MISSample x) {return x.Val;};
        auto pdf = [&](int dist,MISSample x) {return x.Pdfs[dist];};
        auto sampler = [&](MISSample x) {return x;};

        std::array<int,2> dist_range = {0,1};
        std::array<Prec,2> rel_count_range = {0.5,0.5};

        Prec first_integral = MIS::MultipleImportanceSampling(
            samples | ranges::views::take(40),
            dist_range,0,0.f,sampler,func,pdf,
            [&](int i){return rel_count_range[i];},
            MIS::WeightType::BALANCE
        );
        
        Prec second_integral = MIS::MultipleImportanceSampling(
            samples | ranges::views::slice(40,80),
            dist_range,1,0.f,sampler,func,pdf,
            [&](int i){return rel_count_range[i];},
            MIS::WeightType::BALANCE
        );
        
        Prec actual_result = first_integral+second_integral;
        Prec expected_result = 4.519816724947119;
        EXPECT_NEAR(actual_result,expected_result,0.0001);
    };

    TEST(core, BalanceHeuristicTest2)
    {
        std::vector<int> distributions = {1,2};

        auto dist_pdf = [&](int dist_idx, Vec2 x) {return x[1]*dist_idx;};
        std::vector<float> dist_relative_count = { 1.f/(Prec) sqrt(1.f),1.f /(Prec) sqrt(2.f)};

        using pdf_t = decltype(dist_pdf);
        using rel_c = decltype(dist_relative_count);
        using range_t = decltype(distributions);

       

        float result = MIS::BalanceHeuristic(1,distributions,dist_pdf,Vec2{0,1},[&](int i) {return dist_relative_count[i-1];});

        float expected_result = 1*1 / (1*1+2/sqrt(2.f));

        EXPECT_NEAR(result,expected_result,0.0001);
    };

}